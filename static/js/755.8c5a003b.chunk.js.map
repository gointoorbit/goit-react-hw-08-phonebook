{"version":3,"file":"static/js/755.8c5a003b.chunk.js","mappings":"0LACA,OAAgB,YAAc,oCAAoC,iBAAmB,yCAAyC,kBAAoB,2C,oBCDrIA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EAEpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,E,mBCGnDC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAEJE,EAAiB,WAC5B,IAAMC,GAAWC,EAAAA,EAAAA,MACXX,GAAWY,EAAAA,EAAAA,IAAYd,GAsB7B,OACEe,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,qBAAyBC,UACvCC,EAAAA,EAAAA,MAAA,QAAMH,UAAWC,EAAAA,YAAiBG,SAtBjB,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACbC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAASL,EAAKG,SAASE,OAAOD,MAMpC,GAJ2BzB,EAAS2B,MAClC,SAAAC,GAAO,OAAIA,EAAQL,KAAKM,gBAAkBN,EAAKO,OAAOD,aAAa,IAInEE,MAAM,GAADC,OAAIT,EAAI,gCADf,CAIE,IAAMU,EAAa,CAAEV,KAAAA,EAAMG,OAAAA,EAAQQ,IAAI3B,EAAAA,EAAAA,OACvCG,GAASyB,EAAAA,EAAAA,IAAWF,IAEtBZ,EAAKe,OADL,CAEF,EAI6DpB,SAAA,EACvDH,EAAAA,EAAAA,KAAA,SAAOwB,QAAS/B,EAAQQ,UAAWC,EAAAA,iBAAqBC,SAAC,UAGzDH,EAAAA,EAAAA,KAAA,SACEqB,GAAI5B,EACJQ,UAAWC,EAAAA,iBACXuB,KAAK,OACLf,KAAK,OACLgB,QAAQ,6HACRC,MAAM,yIACNC,UAAQ,KAEV5B,EAAAA,EAAAA,KAAA,SAAOwB,QAAS7B,EAAUM,UAAWC,EAAAA,iBAAqBC,SAAC,YAG3DH,EAAAA,EAAAA,KAAA,SACEqB,GAAI1B,EACJM,UAAWC,EAAAA,iBACXuB,KAAK,MACLf,KAAK,SACLgB,QAAQ,4IACRC,MAAM,mFACNC,UAAQ,KAEV5B,EAAAA,EAAAA,KAAA,UAAQyB,KAAK,SAASxB,UAAWC,EAAAA,kBAAsBC,SAAC,oBAMhE,EClEA,GAAgB,gBAAkB,sCAAsC,YAAc,mC,oBCIhF0B,GAAiBnC,EAAAA,EAAAA,MAEVoC,EAAe,WAC1B,IAAMjC,GAAWC,EAAAA,EAAAA,MAOjB,OACEM,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,gBAAoBC,SAAA,EAClCH,EAAAA,EAAAA,KAAA,SAAOwB,QAASK,EAAgB5B,UAAWC,EAAAA,YAAgBC,SAAC,2BAG5DH,EAAAA,EAAAA,KAAA,SACEqB,GAAIQ,EACJ5B,UAAWC,EAAAA,YACXuB,KAAK,OACLf,KAAK,SACLqB,SAfqB,SAAAzB,GACzB,IAAM0B,EAAS1B,EAAM2B,OAAOrB,MAC5Bf,GAASqC,EAAAA,EAAAA,GAAUF,GACrB,MAgBF,EC5BA,GAAgB,YAAc,kCCDjBG,EAAe,SAAAjD,GAAK,OAAIA,EAAM8C,MAAO,ECClD,GAAgB,cAAgB,uCAAuC,WAAa,qCCIvEI,EAAkB,SAAHC,GAAqB,IAAftB,EAAOsB,EAAPtB,QAC1BlB,GAAWC,EAAAA,EAAAA,MAIjB,OACEM,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,YAAgBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,QAAMH,UAAWC,EAAAA,cAAkBC,SAAA,CAChCY,EAAQL,KAAK,KAAGK,EAAQF,WAE3Bb,EAAAA,EAAAA,KAAA,UACEqB,GAAIN,EAAQM,GACZI,KAAK,SACLxB,UAAWC,EAAAA,WACXoC,QAXe,WAAH,OAASzC,GAAS0C,EAAAA,EAAAA,IAAcxB,EAAQM,IAAK,EAWnClB,SACvB,aAKP,ECnBaqC,EAAc,WACzB,IAAMrD,GAAWY,EAAAA,EAAAA,IAAYd,GACvB+C,GAASjC,EAAAA,EAAAA,IAAYoC,GACrBM,EAAmBT,EAErB7C,EAAS6C,QAAO,SAAAjB,GAAO,OACrBA,EAAQL,KAAKM,cAAc0B,SAASV,EAAOhB,cAAc,IAF3D7B,EAIJ,OACEa,EAAAA,EAAAA,KAAA2C,EAAAA,SAAA,CAAAxC,UACEH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,YAAgBC,SAC5BsC,EAAgBG,OAAS,GACxBH,EAAgBI,KAAI,SAAA9B,GAAO,OACzBf,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,gBAAoBC,UACjCH,EAAAA,EAAAA,KAACoC,EAAe,CAACrB,QAASA,KADaA,EAAQM,GAE5C,OAKjB,E,oBCUA,EA3BiB,WACf,IAAMxB,GAAWC,EAAAA,EAAAA,MACXR,GAAYS,EAAAA,EAAAA,IAAYV,GACxBG,GAAQO,EAAAA,EAAAA,IAAYR,GAM1B,OAJAuD,EAAAA,EAAAA,YAAU,WACRjD,GAASkD,EAAAA,EAAAA,MACX,GAAG,CAAClD,KAGFO,EAAAA,EAAAA,MAAAuC,EAAAA,SAAA,CAAAxC,SAAA,EACEH,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAAA7C,UACLH,EAAAA,EAAAA,KAAA,SAAAG,SAAO,iBAETC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,eACJH,EAAAA,EAAAA,KAACJ,EAAc,KACfI,EAAAA,EAAAA,KAAA,MAAAG,SAAI,cACJH,EAAAA,EAAAA,KAAC8B,EAAY,IACZxC,IAAcE,IAASQ,EAAAA,EAAAA,KAAA,OAAAG,SAAK,0BAC5BX,IAASQ,EAAAA,EAAAA,KAAA,OAAAG,SAAK,qDACfH,EAAAA,EAAAA,KAACwC,EAAW,SAIpB,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/AddContactForm/AddContactForm.module.css?92ef","redux/contacts/selectors.js","components/AddContactForm/AddContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/SearchFilter/SearchFilter.module.css?1801","components/SearchFilter/SearchFilter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","redux/filter/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"AddContactForm_contactForm__1XbBB\",\"contactFormInput\":\"AddContactForm_contactFormInput__QuU-h\",\"contactFormButton\":\"AddContactForm_contactFormButton__ZcYSf\"};","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import css from './AddContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst nameId = nanoid();\nconst numberId = nanoid();\n\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const duplicativeContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.trim().toLowerCase()\n    );\n\n    if (duplicativeContact) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else {\n      const newContact = { name, number, id: nanoid() };\n      dispatch(addContact(newContact));\n    }\n    form.reset();\n  };\n\n  return (\n    <div className={css.contactFormContainer}>\n      <form className={css.contactForm} onSubmit={handleSubmit}>\n        <label htmlFor={nameId} className={css.contactFormLabel}>\n          Name\n        </label>\n        <input\n          id={nameId}\n          className={css.contactFormInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+((['\\s\\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        ></input>\n        <label htmlFor={numberId} className={css.contactFormLabel}>\n          Number\n        </label>\n        <input\n          id={numberId}\n          className={css.contactFormInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"^\\+((?:9[679]|8[035789]|6[789]|5[90]|42|3[578]|2[1-689])|9[0-58]|8[1246]|6[0-6]|5[1-8]|4[013-9]|3[0-469]|2[70]|7|1)(?:\\W*\\d){0,13}\\d$\"\n          title=\"Phone number must be digits and can contain spaces, dashes and must start with +\"\n          required\n        ></input>\n        <button type=\"submit\" className={css.contactFormButton}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"SearchFilter_filterContainer__nlAPZ\",\"filterInput\":\"SearchFilter_filterInput__QJcWn\"};","import css from './SearchFilter.module.css';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filter/slice';\n\nconst searchFilterId = nanoid();\n\nexport const SearchFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    const filter = event.target.value;\n    dispatch(setFilter(filter));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <label htmlFor={searchFilterId} className={css.filterLabel}>\n        Find contacts by name\n      </label>\n      <input\n        id={searchFilterId}\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n      ></input>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","export const selectFilter = state => state.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"itemContainer\":\"ContactListItem_itemContainer__kAjba\",\"buttonItem\":\"ContactListItem_buttonItem__mdQeF\"};","import css from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <div className={css.contactItem}>\n      <span className={css.itemContainer}>\n        {contact.name}: {contact.number}\n      </span>\n      <button\n        id={contact.id}\n        type=\"button\"\n        className={css.buttonItem}\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { selectFilter } from '../../redux/filter/selectors';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = !filter\n    ? contacts\n    : contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n  return (\n    <>\n      <ul className={css.contactList}>\n        {visibleContacts.length > 0 &&\n          visibleContacts.map(contact => (\n            <li className={css.contactListItem} key={contact.id}>\n              <ContactListItem contact={contact} />\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n","import { AddContactForm } from '../components/AddContactForm/AddContactForm';\nimport { SearchFilter } from '../components/SearchFilter/SearchFilter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectIsLoading, selectError } from '../redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <main>\n        <h1>Phonebook</h1>\n        <AddContactForm />\n        <h2>Contacts</h2>\n        <SearchFilter />\n        {isLoading && !error && <div>Loading in progres...</div>}\n        {error && <div>We cannot download your data. Please try again.</div>}\n        <ContactList />\n      </main>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","nameId","nanoid","numberId","AddContactForm","dispatch","useDispatch","useSelector","_jsx","className","css","children","_jsxs","onSubmit","event","preventDefault","form","currentTarget","name","elements","value","number","some","contact","toLowerCase","trim","alert","concat","newContact","id","addContact","reset","htmlFor","type","pattern","title","required","searchFilterId","SearchFilter","onChange","filter","target","setFilter","selectFilter","ContactListItem","_ref","onClick","deleteContact","ContactList","visibleContacts","includes","_Fragment","length","map","useEffect","fetchContacts","Helmet"],"sourceRoot":""}